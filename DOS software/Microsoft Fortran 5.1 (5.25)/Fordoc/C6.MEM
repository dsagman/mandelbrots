







                               ГЛАВА 6

         СТРУКТУРЫ ЗАПИСЕЙ: ФОРМАТЫ ФАЙЛОВ И ДОСТУП К ФАЙЛАМ

     В этой главе описаны структуры записей  (структуры  файлов),
создаваемых  MSФортраном.   Формат  данных  и тип доступа к файлу
определяют "структуру записей".  Каждая структура  записей  имеет
свои  преимущества и, в зависимости от задачи, вы можете прийти к
выводу, что легкость использования одного типа более  важна,  чем
большая скорость или компактный размер другого типа.


     6.1  ПОНИМАНИЕ СТРУКТУР:  ФОРМАТЫ И МЕТОДЫ ДОСТУПА

     "Записью" называется основной элемент в файле  данных.   Все
записи  в  отдельном файле данных используют одинаковый метод для
хранения информации.  Возможны следующие методы:

      o  Форматированный

      o  Неформатированный

      o  Двоичный

     Вы можете посылать или извлекать информацию из файла  данных
одним из двух "способов доступа":

      o  Последовательным

      o  Прямым

     Последовательный доступ к данным можно  осуществлять  только
запись  за  записью,  а  прямой доступ можно выполнять, указывая,
какую  запись  нужно  извлечь.   Всего  возможны  шесть  структур
записей:    форматированная   последовательная,   форматированная
прямая,  неформатированная  последовательная,   неформатированная
прямая, двоичная последовательная и двоичная прямая.  В следующих
разделах подробно описаны все эти структуры записей.


     6.2  ИСПОЛЬЗОВАНИЕ ФОРМАТИРОВАННЫХ ЗАПИСЕЙ

     Форматированные  файлы  это  файлы,   открытые   с   помощью
FORM='FORMATTED'.      Они    состоят    из    последовательности
форматированных  записей  из  символов  ASCII.    Каждая   запись


                               237



оканчивается  ASCII-символами  возврата  каретки  (CR) и перевода
строки (LF).   Если  вас  не  интересует  компактный  размер  или
высокая скорость записи или считывания данных, то форматированные
файлы являются самой легкой структурой  для  использования.   Все
внутренние  файлы  (подстроки  символов,  символьные  переменные,
символьные  массивы  или  несимвольные   массивы)   должны   быть
форматированными.


     6.2.1  ФОРМАТИРОВАННЫЕ ПОСЛЕДОВАТЕЛЬНЫЕ ЗАПИСИ

     Форматированный последовательный файл это последовательность
форматированных    записей,    записываемых    или    считываемых
последовательно.  Записи могут изменяться по длине или могут быть
пустыми, как показано на рисунке 6.1.

+--------------+--+--+--------------+--+--+----------+
|              |0D|0A|              |0D|0A|          |
+--------------+--+--+--------------+--+--+----------+
    Запись N            Запись N+1

Рисунок 6.1  Форматированные записи в форматированном
             последовательном файле

     Следующий   фрагмент   программы   создает   форматированный
последовательный файл, показанный на рисунке 6.2:

      I=4
      OPEN (33, FILE='FSEQ')
C     (FORMATTED SEQUENTIAL BY DEFAULT)
      WRITE (33, '(A,I3)') 'RECORD', I/3

      WRITE (33, '()')
      WRITE (33, '(11HThe 3 rd One)')
      CLOSE (33)
      END

Байты 1       9 10 11 12 13 14       24 25 26
     +---------+--+--+--+--+-----------+--+--+
     |         |(Hex)|(Hex)|           |(Hex)|
     |RECORD  1|0A|0D|0A|0D|The 3rd One|0A|0D|
     +---------+--+--+--+--+-----------+--+--+
      9 байт    CR LF|CR LF   11 байт   CR LF
      данных в       |        данных в
      записи 1       |        записи 3
                  0 байт
                 данных в
                 записи 2

Рисунок 6.2  Форматированный последовательный файл


                               238



     6.2.2  ФОРМАТИРОВАННЫЕ ПРЯМЫЕ ЗАПИСИ

     В форматированном файле прямого  доступа  все  записи  имеют
одинаковую  длину  и  могут  быть  записаны  или  считаны в любом
порядке.  Длина записи  равна  длине,  заданной  в  спецификаторе
RECL=,  плюс  два  байта  для  символов  возврата  каретки (CR) и
перевода строки (LF),  которые  служат  в  качестве  разделителей
записей.    До   записывания   записи   все  эти  байты  являются
неопределенными.

     Если данные не полностью  заполняют  запись,  то  компилятор
дополняет    оставшуюся    часть   записи   пробелами.    Пробелы
гарантируют,  что  файл  содержит  только  полностью  заполненные
записи одинаковой длины.

     Следующий фрагмент программы  создает  форматированный  файл
прямого доступа, показанный на рисунке 6.3:

      OPEN (33, FILE='FDIR',FORM='FORMATTED',
     + ACCESS='DIRECT',RECL=10)
      WRITE (33, '(A)', REC=1) 'RECORD ONE'

      WRITE (33, '(I5)', REC=3) 30303
      CLOSE (33)
      END

        REC=1             REC=2              REC=3
Байты 1       10 11 12 13        22 23 24 25      34 35 36
     +----------+--+--+------------+--+--+----------+--+--+
     |  (ASCII) |(Hex)|            |  |  |(ASCII)   |(Hex)|
     |RECORD ONE|0D|0A|            |  |  |30303     |0D|0A|
     +----------+--+--+------------+--+--+----------+--+--+
       10 байт   CR LF   12 байт    CR LF  5 байт    CR LF
       данных          неопределен-       данных +
                       ных данных         5 пробелов

Рисунок 6.3  Форматированный файл прямого доступа


     6.3  ИСПОЛЬЗОВАНИЕ НЕФОРМАТИРОВАННЫХ ЗАПИСЕЙ

     Неформатированный     файл     (FORM='UNFORMATTED')      это
последовательность записей, состоящих из "физических блоков", как
показано  ниже.   Каждая   запись   содержит   последовательность
значений.   Отсутствие  форматирования  делает  файлы  этого типа
более  компактными  по  сравнению  с  файлами,   которые   хранят
информацию  в  форматированном виде.  Доступ также является более
быстрым, чем у форматированных файлов.




                               239



     6.3.1  НЕФОРМАТИРОВАННЫЕ ПОСЛЕДОВАТЕЛЬНЫЕ ФАЙЛЫ

     Неформатированные    последовательные    файлы     допускают
последовательный  доступ  к  файлам.   Записи  могут  меняться по
длине.

     Неформатированные последовательные файлы организованы в виде
"кусков" по 130 байт или менее, называемых "физическими блоками".
Каждый физический блок состоит из данных, которые вы посылаете  в
файл   (до  128  байт),  плюс  два  однобайтовых  "байта  длины",
вставляемых компилятором.  Байты длины обозначают  действительное
количество имеющихся данных.

     На рисунке 6.4 показана структура физического блока;  каждая
"L" представляет байт длины.

            Физический блок
|                                     |
+-----+-------------------------+-----+
|  L  |                         |  L  |
+-----+-------------------------+-----+
      |                         |
           Данные <= 128 байт

Рис.6.4  Физический блок в неформатированном
         последовательном файле

     "Логической записью"  называется  неформатированная  запись,
которая  содержит  один  или  более  физических блоков (см.  рис.
6.5).   Логические  записи  могут  быть  сколь  угодно  большими;
компилятор  будет использовать столько физических блоков, сколько
необходимо.

     Когда вы создаете логическую запись, состоящую из более  чем
одного  физического блока, компилятор устанавливает байт длины на
129, чтобы  показать,  что  данные  в  текущем  физическом  блоке
продолжаются  в  следующем  физическом блоке.  Тогда длина порции
данных последнего физического  блока  в  записи  имеет  длину  (в
байтах), равную

      MOD(length,128)

где length равна полной длине данных  в  записи.   (MOD  является
встроенной  функцией  остатка).   Например,  если вы записали 140
байт данных, то логическая запись имеет структуру, показанную  на
рисунке 6.5:






                               240



:           Одна логическая запись            :
+-----+-----------+-----+-----+---------+-----+
|(Dec)|           |(Dec)|(Dec)|         |(Dec)|
| 129 |           | 129 | 12  |         | 12  |
+-----+-----------+-----+-----+---------+-----+
      : 128 байт  :           : 12 байт :
         данных                  данных

Рисунок 6.5  Логическая запись в неформатированном
             последовательном файле

     Первый    и    последний    байты    в     неформатированном
последовательном  файле  зарезервированы:   первый  байт содержит
значение 75, а последний байт  содержит  значение  130.   Фортран
использует  эти  байты  для  проверки  ошибок и обозначения конца
файла.    Эти   байты   показаны    на    рис.6.6    в    примере
неформатированного   последовательного   файла  (на  рисунке  Dec
означает десятичное число, а Hex - шестнадцатиричное).

         :       Логическая запись 1         :  Логическая   :
         :                                   :   запись 2    :
Байты 1  :2   3     130 131 132 133   144 145:146 147 149 150:151
     +---+---+---------+---+---+---------+---+---+-------+---+---+
     |Dec|Dec|   Hex   |Dec|Dec|   Hex   |Dec|Dec| ASCII |Dec|Dec|
     |75 |129|FF ... FF|129|12 |FF ... FF|12 | 3 |  xyz  | 3 |130|
     +---+---+---------+---+---+---------+---+---+-------+---+---+
      BOF  L : 128 байт: L   L : 12 байт : L   L :3 байта: L  EOF
             :  данных :       :  данных :       : данных:

BOF = байт начала файла (десятичное 75)
EOF = байт конца файла (десятичное 130)
L   = байт длины физического блока (0<=L<=129)

Рис.6.6  Неформатированный последовательный файл

     Следующий  фрагмент  программы   создает   неформатированный
последовательный файл, показанный на рисунке 6.6:

      CHARACTER XYZ(3)
      INTEGER*4 IDATA (35)
      DATA IDATA /35 * -1/, XYZ /'x', 'y', 'z'/
C
C     (-1 представляется 16-ричным числом FF FF FF FF)
C
      OPEN (33, FILE='UFSEQ',FORM='UNFORMATTED')

C     (Последовательный по умолчанию)
C
C     Записываем 140-байтную запись (128 + еще 12 байт),
C     за которой следует 3-байтная запись.


                               241



      WRITE (33) IDATA
      WRITE (33) XYZ
      CLOSE (33)
      END


     6.3.2  НЕФОРМАТИРОВАННЫЕ ПРЯМЫЕ ЗАПИСИ

     Неформатированные     файлы     прямого     доступа      это
последовательности    неформатированных   записей.    Вы   можете
записывать или считывать записи в любом выбранном  порядке.   Все
записи  имеют  одинаковую  длину,  заданную спецификатором RECL=.
Никакие ограничивающие байты не разделяют записи или иным образом
не обозначают структуру записей.

     Вы можете записать в неформатированный файл прямого  доступа
часть  записи.   Версия  5.0 MSФортрана дополняет такие записи до
фиксированной длины  ASCII-символами  NUL;  в  файлах,  созданных
версиями   Фортрана   до   4.0,   для  дополнения  записей  могли
использоваться  произвольные  значения.   Незаписанные  записи  в
файле  содержат  неопределенные  данные,  как  показано в примере
неформатированного файла прямого доступа на рисунке 6.7.

     :      REC=1       :     REC=2      :     REC=3       :
     :                  :                :                 :
Байты:1      4 5      10:11            20:21    24 25    30:
     +--------+---------+----------------+--------+--------+
     |  (Hex) |         |                |  (Hex) | (ASCII)|
     |01080000|         |                |01000000| abcdef |
     +--------+---------+----------------+--------+--------+
     : 4 байта: 6 неопр.:    10 байт     : 4 байта: 6 байт :
     :  для   :байт (ну-: неопределенных :для логи:  для   :
     : целого :ли в MS- :    данных      :ческого :символов:
     :  2049  :Фортране):                : .TRUE. : abcdef :

Рис.6.7  Неформатированный файл прямого доступа

     Следующий фрагмент программы создает неформатированный  файл
прямого доступа, показанный на рисунке 6.7:

      OPEN (33, FILE='UFDIR', RECL=10,
     + FORM='UNFORMATTED', ACCESS='DIRECT')
      WRITE (33, REC=3) .TRUE., 'abcdef'
      WRITE (33, REC=1) 2049
      CLOSE (33)
      END






                               242



     6.4  ИСПОЛЬЗОВАНИЕ ДВОИЧНЫХ ЗАПИСЕЙ

     Задание FORM='BINARY' особенно полезно в том  случае,  когда
Фортран-программа  читает  файл, созданный программой, написанной
на  других  языках.   Такие  файлы  обычно  не  имеют  внутреннюю
структуру  или  структуру  файла,  которая соответствует одной из
стандартных структур файлов Фортрана.  Кроме того, двоичные файлы
являются  компактными:   если  вам  необходимо  сохранить большое
количество данных, то используйте двоичный формат файла.


     6.4.1  ДВОИЧНЫЕ ПОСЛЕДОВАТЕЛЬНЫЕ ЗАПИСИ

     Двоичный  последовательный   файл   это   последовательность
значений, записываемых или считываемых в одном и том же порядке и
хранящихся в виде  двоичных  значений.   Никаких  видимых  границ
записей  не  существует,  как  не  существует и специальных байт,
которые  обозначают  структуру  файла.   Данные  считываются  или
записываются  без  изменений  в  форме  или  длине.   Для  любого
элемента списка ввода-вывода  последовательность  байт  в  памяти
является последовательностью байт в файле (см.  рис.  6.8 ниже).

Байты 1         12 13   17 21 22    29 30    33
     +------------+----+-----+--------+--------+
     |   (ASCII)  |    |     | (ASCII)|  (Hex) |
     |What you see| is |what |you get!|07070707|
     +------------+----+-----+--------+--------+
     :  Первый WRITE   : Второй WRITE : Третий :
     :    16 байт      :   13 байт    : 4 байта:
     :                 :              : (bell) :

Рис.6.8  Двоичный последовательный файл

     Следующая программа создает двоичный последовательный  файл,
показанных на рисунке 6.8:

$STORAGE:4
      INTEGER*1 BELLS(4)
      INTEGER IWYS(3)
      CHARACTER*4 CVAR
      DATA BELLS /4*7/
      DATA CVAR /' is '/,IWYS/'What',' you',' see'/

C     Эта программа записывает последовательность
C     'What you see is what you get!',
C     за которой идет четыре символа bell (16-ричное 07)

      OPEN (33, FILE='BSEQ',FORM='BINARY')

C     (Последовательный по умолчанию)


                               243



      WRITE (33) IWYS, CVAR
      WRITE (33) 'what ,' 'you get!'
      WRITE (33) BELLS
      CLOSE (33)
      END


     6.4.2  ДВОИЧНЫЕ ПРЯМЫЕ ЗАПИСИ

     Двоичный  файл  прямого  доступа  хранит   записи   в   виде
последовательности  двоичных  чисел,  доступных  в любом порядке.
Каждая  запись  в  файле  имеет  одинаковую  длину,  заданную   в
аргументе RECL= оператора OPEN.

     Вы  можете  записать  в  двоичные  файлы   прямого   доступа
частичные   записи:   любая  неиспользуемая  часть  записи  будет
содержать неопределенные данные.

     Отдельная операция чтения или записи может передавать больше
данных,  чем  содержится  в записи, передавая данные на следующую
запись  (записи)  в  файле.   Выполнение   такой   операции   над
неформатированным  файлом  прямого  доступа  привело бы к ошибке.
Действительные операции ввода-вывода для неформатированных файлов
прямого  доступа дают идентичные результаты, если они выполняются
над двоичными файлами прямого доступа, при условии, что  операции
не  зависят  от заполнения нулем неполных записей (см.  рис.  6.9
ниже).

     :  REC=1   :   REC=2   :        REC=3          :   REC=4   :
     :          :           :                       :           :
Байты:1       10:11 15 16 20:21    24 25    28 29 30:31 32 33 40:
     +----------+-----------+-----------------------+-----------+
     |   ASCII  |ASCII:     |  Hex   :  Hex   :     |ASCII:     |
     |abcdefghij|klmno:     |04000000:05000000:     | pq  :     |
     +----------+-----------+--------+--------------+-----------+
     : 15 байт для    :неоп-: 4 байта: 4 байта:неоп-:симв.:неоп-:
     : симв.значения  :ред. : целые значения  :ред. :знач.:ред. :
     : abcdefghijklmno:байты:     4 и 5       :байты: pq  :байты:

Рис. 6.9  Двоичный файл прямого доступа

     Следующий фрагмент программы создает двоичный  файл  прямого
доступа, показанный на рисунке 6.9:

$STORAGE:4
      OPEN (33, FILE='BDIR',RECL=10,
     + FORM='BINARY',ACCESS='DIRECT')
      WRITE (33, REC=1) 'abcdefghijklmno'
      WRITE (33) 4,5
      WRITE (33,rec=40) 'pq'


                               244



      CLOSE (33)
      END


















































                               245
