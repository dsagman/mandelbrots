\ Information                                                                                                                   FGRAPH                                                                                                                          A Forth interface for the Fastgraph (Ted Gruber Software)       graphics library                                                                                                                Note: Fastgraph driver FGDRIVER.EXE must be run before          executing any of these functions.  Use FGTEST to test           driver status.                                                                                                                  Adapted from TFGRAF by M.Petremann & P.Guillaumaud                                                                                                                                                                                                                                                                              \ Load screen                                                   forth definitions decimal                                                                                                       cr .( loading FGraph interface 1.5 ) cr                                                                                         2 #screens 1- thru                                                                                                              forthsystem                                                                                                                          true value fg4  \ set 'false' if using Fastgraph 3.x                                                                            fg4 [if]  4  [else]  3  [then]                                                                                                  .( for Fastgraph/Light ) 0 .r .( .x )  crfn +fn >fg msg parms                                          hex                                                                                                                             variable fn   0 fn !                                                                                                            macro fn+  fn @  # ax mov  1 fn +!  endm                        macro >fg  fn+ 62 int  endm                                                                                                     application                                                                                                                     variable msg    9090 msg !                                                                                                      create parms     \ parameter table                              fg4 [if]  40  [else]  0C  [then] allot                                                                                                                                                          \ get2 get3                                                     label get2                                                        parms # bx mov  dx dx sub                                       dx push  sp 02 [bx] mov  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         ds push  es pop  62 int  next                                 end-code                                                                                                                        label get3                                                        parms # bx mov  dx dx sub                                       dx push  sp 02 [bx] mov  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         dx push  sp 0A [bx] mov  ds 08 [bx] mov                         ds push  es pop  62 int  next                                 end-code                                                                                                                        \ FGVER FGTEST                                                  0 0 2constant FGVER  ( -- major minor )  \ driver version                                                                       \ Test Fastgraph/Light driver  1=not found, 2=wrong version     code FGTEST  ( -- 0 | error )                                     35 # ah mov  62 # al mov  21 int  1 # ax mov                    es: 4746 # 0A [bx] cmp  1 $ jnz  es: -2 [bx] es mov             di di sub  es: 0F [di] bx mov  3030 # bx sub                    0A # al mov  bl mul  bh al add  ax addr fgver ) mov             es: 0D [di] bx mov  2E30 # bx sub  bx addr fgver 2+ ) mov       fg4 [if]  4  [else]  3  [then]  # bx cmp                        2 # ax mov  1 $ jnz  ax ax sub  1 $: 1push                    end-code                                                                                                                                                                                                                                                        \ ALLOCATE ALLOCCMS ALLOCEMS ALLOCXMS                           code ALLOCATE  ( page_number -- 0 | error )                       bx pop  >fg  1push                                            end-code                                                                                                                        code ALLOCCMS  ( page_number -- 0 | error )                       bx pop  >fg  1push                                            end-code                                                                                                                        code ALLOCEMS  ( page_number -- 0 | error )                       bx pop  >fg  1push                                            end-code                                                                                                                        code ALLOCXMS  ( page_number -- 0 | error )                       bx pop  >fg  1push                                            end-code                                                        \ AUTOMODE BESTMODE BOX                                         code AUTOMODE  ( -- n )                                           >fg  1push                                                    end-code                                                                                                                        code BESTMODE  ( horizontal vertical pages -- n | -1 )            dx pop  cx pop  bx pop  >fg  1push                            end-code                                                                                                                        code BOX  ( minx maxx miny maxy -- )                              ax pop  dx pop  cx pop  bx pop                                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                                                                                                                                                        \ BOXDEPTH BOXX BUTTON                                          code BOXDEPTH  ( xdepth ydepth -- )                               cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code BOXX  ( minx maxx miny maxy -- )                             ax pop  dx pop  cx pop  bx pop                                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                        code BUTTON  ( n -- status )                                      bx pop  >fg  1push                                            end-code                                                                                                                                                                                                                                                        \ CAPSLOCK CHGATTR CHGTEXT CIRCLE                               code CAPSLOCK  ( -- 0 | 1 )                                       >fg  1push                                                    end-code                                                                                                                        code CHGATTR  ( n -- )                                            bx pop  >fg  next                                             end-code                                                                                                                        code CHGTEXT  ( adr_string n -- )                                 cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        code CIRCLE  ( radius -- )                                        bx pop  >fg  next                                             end-code                                                        \ CIRCLEF CLIPMAP CLIPMASK                                      code CIRCLEF  ( radius -- )                                       bx pop  >fg  next                                             end-code                                                                                                                        fg4 [if]                                                        code CLIPMAP  ( adr_map_array width height -- )                   dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                        [then]                                                                                                                          code CLIPMASK  ( adr_map_array runs width -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                                                                                        \ CLPIMAGE CLPRECT COLORS                                       code CLPIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code CLPRECT  ( minx maxx miny maxy -- )                          ax pop  dx pop  cx pop  bx pop                                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                        fg4 [if]                                                        code COLORS  ( -- n )                                             >fg  1push                                                    end-code                                                        [then]                                                                                                                          \ COPYPAGE CURSOR DASH DASHREL                                  code COPYPAGE  ( source_page dest_page -- )                       cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code CURSOR  ( state -- )                                         bx pop  >fg  next                                             end-code                                                                                                                        code DASH  ( ix iy pattern -- )                                   dx pop  cx pop  bx pop  >fg  next                             end-code                                                                                                                        code DASHREL  ( ix iy pattern -- )                                dx pop  cx pop  bx pop  >fg  next                             end-code                                                        \ DEFCOLOR DEFPAGES DISPFILE DISPLAY                            code DEFCOLOR  ( index value -- )                                 cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code DEFPAGES  ( source_page dest_page -- )                       cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code DISPFILE  ( adr_filename width format -- )                   dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code DISPLAY  ( adr_map_array runs width -- )                     dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                        \ DISPLAYP DRAW DRAWMAP DRAWMASK                                code DISPLAYP  ( adr_map_array runs width -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code DRAW  ( ix iy -- )                                           cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code DRAWMAP  ( adr_map_array width height -- )                   dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code DRAWMASK  ( adr_map_array runs width -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                        \ DRAWREL DRAWRELX DRAWX                                        code DRAWREL  ( ix iy -- )                                        cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code DRAWRELX  ( ix iy -- )                                       cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code DRAWX  ( ix iy -- )                                          cx pop  bx pop  >fg  next                                     end-code                                                                                                                                                                                                                                                                                                                        \ DRECT DRWIMAGE EGACHECK                                       code DRECT  ( minx maxx miny maxy adr_matrix -- )                 di pop  ax pop  dx pop  cx pop  bx pop  si push                 ax si mov  ds push  es pop  >fg  si pop  next                 end-code                                                                                                                        code DRWIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code EGACHECK  ( -- n | 0 )                                       >fg  1push                                                    end-code                                                                                                                                                                                                                                                        \ ELLIPSE ELLIPSEF FGERASE FADEIN                               code ELLIPSE  ( horiz vert -- )                                   cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code ELLIPSEF  ( horiz vert -- )                                  cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code FGERASE  ( -- )                                              >fg  next                                                     end-code                                                                                                                        code FADEIN  ( delay -- )                                         bx pop  >fg  next                                             end-code                                                        \ FADEOUT FILLPAGE FINDPAGE                                     code FADEOUT  ( delay -- )                                        bx pop  >fg  next                                             end-code                                                                                                                        code FILLPAGE  ( -- )                                             >fg  next                                                     end-code                                                                                                                        fg4 [if]                                                        code FINDPAGE  ( -- n | 0 )                                       >fg  1push                                                    end-code                                                        [then]                                                                                                                                                                                          \ FLICDONE FLICHEAD                                             fg4 [if]                                                        code FLICDONE  ( adr_context -- )                                 bx pop  ds push  es pop  >fg  next                            end-code                                                                                                                        code FLICHEAD  ( adr_filename adr_header -- 0 | error )           parms # bx mov                                                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  1push                                   end-code                                                        [then]                                                                                                                                                                                                                                                          \ FLICMODE FLICOPEN                                             fg4 [if]                                                        code FLICMODE  ( adr_header -- n | -1 )                           bx pop  ds push  es pop  >fg  1push                           end-code                                                                                                                        code FLICOPEN  ( adr_filename adr_context -- 0 | error )          parms # bx mov                                                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  1push                                   end-code                                                        [then]                                                                                                                                                                                                                                                          \ FLICPLAY                                                      fg4 [if]                                                        code FLICPLAY  ( adr_context frames flags -- n )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  1push           end-code                                                        [thenfg4 [if]                                                        \ code FLICSIZE  ( adr_header adr_width adr_height -- )         \  parms # bx mov                                               \  0A [bx] pop  ds 08 [bx] mov  06 [bx] pop  ds 04 [bx] mov     \  02 [bx] pop  ds 00 [bx] mov  ds push  es pop  >fg  next      \ end-code                                                                                                                      code FLICSIZE  ( adr_header -- width height )                     parms # bx mov  dx dx sub                                                   02 [bx] pop  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         dx push  sp 0A [bx] mov  ds 08 [bx] mov                         ds push  es pop  >fg  next                                    end-code                                                        [then]                                                          \ FLICSKIP FLIPMASK FLOOD                                       fg4 [if]                                                        code FLICSKIP  ( adr_context frames -- n )                        cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                        [then]                                                                                                                          code FLIPMASK  ( adr_map_array runs width -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code FLOOD  ( ix iy -- )                                          cx pop  bx pop  >fg  next                                     end-code                                                                                                                                                                                        \ FLPIMAGE FONTSIZE FREEPAGE GETADDR                            code FLPIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code FONTSIZE  ( char_height -- )                                 bx pop  >fg  1push                                            end-code                                                                                                                        code FREEPAGE  ( page_number -- 0 | error )                       bx pop  >fg  1push                                            end-code                                                                                                                        code GETADDR  ( -- segment )                                      >fg  1push                                                    end-code                                                        \ GETATTR                                                       code GETATTR  ( row column -- n )                                 cx pop  bx pop  >fg  1push                                    end-codefg4 [if]                                                        \ code GETBANKS  ( adr_read_bank adr_write_bank -- )            \  fgpm # bx mov                                                \  06 [bx] pop  ds 04 [bx] mov                                  \  02 [bx] pop  ds 00 [bx] mov                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code GETBANKS  ( -- read_bank write_bank )                        fn+  get2 ) jmp                                               end-code                                                        [then]                                                                                                                                                                                                                                                          \ GETBLOCK GETCHAR                                              code GETBLOCK  ( segment offset minx maxx miny maxy -- )          di pop  ax pop  dx pop  cx pop  bx pop  es pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                        code GETCHAR  ( row column -- n )                                 cx pop  bx pop  >fg  1push                                    end-codefg4 [if]                                                        \ code GETCLIP                                                  \  ( adr_minx adr_maxx adr_miny adr_maxy -- )                   \  0E [bx] pop  ds 0C [bx] mov  0A [bx] pop  ds 08 [bx] mov     \  06 [bx] pop  ds 04 [bx] mov  02 [bx] pop  ds 00 [bx] mov     \  ds push  es pop  >fg  next                                   \ end-code                                                      [thenfg4 [if]                                                        code GETCLIP  ( -- minx maxx miny maxy )                          parms # bx mov  dx dx sub                                       dx push  sp 02 [bx] mov  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         dx push  sp 0A [bx] mov  ds 08 [bx] mov                         dx push  sp 0E [bx] mov  ds 0C [bx] mov                         ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                                                                                                                                                                                                                                                                                          \ GETCLOCK GETCOLOR GETDACS                                     code GETCLOCK  ( -- d )                                           >fg  ax dx xchg  2push                                        end-code                                                                                                                        code GETCOLOR  ( -- n )                                           >fg  1push                                                    end-code                                                                                                                        code GETDACS  ( start count adr_values -- )                       bx pop  cx pop  dx pop                                          ds push  es pop  >fg  next                                    end-code                                                                                                                                                                                                                                                        \ GETENTRY GETHPAGE                                             \ code GETENTRY  ( page_number adr_page_addr adr_page_type -- ) \  parms # bx mov                                               \  06 [bx] pop  ds 04 [bx] mov                                  \  02 [bx] pop  ds 00 [bx] mov                                  \  cx pop  ds push  es pop  >fg  next                           \ end-code                                                                                                                      code GETENTRY  ( page_number -- page_addr page_type )             cx pop  fn+  get2 ) jmp                                       end-code                                                                                                                        code GETHPAGE  ( -- n )                                           >fg  1push                                                    end-code                                                                                                                        \ GETIMAGE GETINDEX                                             code GETIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code GETINDEX  ( index -- n )                                     bx pop  >fg  1push                                            end-codecode GETKEY  ( adr_key adr_aux -- )                           \  parms # bx mov                                               \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code GETKEY  ( -- key aux )                                       fn+  get2 ) jmp                                               end-code                                                                                                                                                                                                                                                                                                                                                                                        \ GETLINES GETMAP GETMAXX GETMAXY                               code GETLINES  ( -- n )                                           >fg  1push                                                    end-code                                                                                                                        code GETMAP  ( adr_map_array width height -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code GETMAXX  ( -- n )                                            >fg  1push                                                    end-code                                                                                                                        code GETMAXY  ( -- n )                                            >fg  1push                                                    end-code                                                        \ GETMODE GETPAGE GETPIXEL                                      code GETMODE  ( -- n )                                            msg # bx mov  ds push  es pop  >fg  1push                     end-code                                                                                                                        code GETPAGE  ( -- n )                                            >fg  1push                                                    end-code                                                                                                                        code GETPIXEL  ( ix iy -- n | -1 )                                cx pop  bx pop  >fg  1push                                    end-code                                                                                                                                                                                                                                                                                                                        \ GETRGB                                                        \ code GETRGB  ( number adr_red adr_green adr_blue -- )         \  parms # bx mov                                               \  0A [bx] pop  ds 08 [bx] mov                                  \  06 [bx] pop  ds 04 [bx] mov                                  \  02 [bx] pop  ds 00 [bx] mov                                  \  cx pop  ds push  es pop  >fg  next                           \ end-code                                                                                                                      code GETRGB  ( number -- red green blue )                         cx pop  fn+  get3 ) jmp                                       end-code                                                                                                                                                                                                                                                                                                                        \\                                                              fg4 [if]                                                        code GETVIEW  ( adr_view_minx adr_view_maxx adr_view_miny         adr_view_maxy adr_minx adr_maxx adr_miny adr_maxy -- )          parms # bx mov                                                  1E [bx] pop  ds 1C [bx] mov  1A [bx] pop  ds 18 [bx] mov        16 [bx] pop  ds 14 [bx] mov  12 [bx] pop  ds 10 [bx] mov        0E [bx] pop  ds 0C [bx] mov  0A [bx] pop  ds 08 [bx] mov        06 [bx] pop  ds 04 [bx] mov  02 [bx] pop  ds 00 [bx] mov        ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                                                                                                                                                                                                                          \ GETVIEW                                                       fg4 [if]                                                        code GETVIEW  ( -- view_minx view_maxx view_miny view_maxy          minx maxx miny maxy )                                         parms # bx mov  dx dx sub                                       dx push  sp 02 [bx] mov  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         dx push  sp 0A [bx] mov  ds 08 [bx] mov                         dx push  sp 0E [bx] mov  ds 0C [bx] mov                         dx push  sp 12 [bx] mov  ds 10 [bx] mov                         dx push  sp 16 [bx] mov  ds 14 [bx] mov                         dx push  sp 1A [bx] mov  ds 18 [bx] mov                         dx push  sp 1E [bx] mov  ds 1C [bx] mov                         ds push  es pop  >fg  next                                    end-code                                                        [then]                                                          \ GETVPAGE GETXBOX GETXJOY                                      code GETVPAGE  ( -- n )                                           >fg  1push                                                    end-code                                                                                                                        fg4 [if]                                                        code GETXBOX  ( -- n )                                            >fg  1push                                                    end-code                                                        [then]                                                                                                                          code GETXJOY  ( n -- n2 | -1 )                                    bx pop  >fg  1push                                            end-code                                                                                                                                                                                        \ GETXJUST GETXPOS GETYBOX                                      fg4 [if]                                                        code GETXJUST  ( -- -1 | 0 | 1 )                                  >fg  1push                                                    end-code                                                        [then]                                                                                                                          code GETXPOS  ( -- n )                                            >fg  1push                                                    end-code                                                                                                                        fg4 [if]                                                        code GETYBOX  ( -- n )                                            >fg  1push                                                    end-code                                                        [then]                                                          \ GETYJOY GETYJUST GETYPOS                                      code GETYJOY  ( n -- n2 | -1 )                                    bx pop  >fg  1push                                            end-code                                                                                                                        fg4 [if]                                                        code GETYJUST  ( -- status )                                      >fg  1push                                                    end-code                                                        [then]                                                                                                                          code GETYPOS  ( -- n )                                            >fg  1push                                                    end-code                                                                                                                                                                                        \ HUSH HUSHNEXT IMAGEBUF IMAGESIZ                               code HUSH  ( -- )                                                 >fg  next                                                     end-code                                                                                                                        code HUSHNEXT  ( -- )                                             >fg  next                                                     end-code                                                                                                                        code IMAGEBUF  ( segment offset size -- )                         cx pop  bx pop  es pop  >fg  next                             end-code                                                                                                                        code IMAGESIZ  ( width height -- d )                              cx pop  bx pop  >fg  ax dx xchg  2push                        end-code                                                        \ INITEMS INITJOY INITPM                                        code INITEMS  ( -- 0 | error )                                    >fg  1push                                                    end-code                                                                                                                        code INITJOY  ( n -- 0 | error )                                  bx pop  >fg  1push                                            end-code                                                                                                                        fg4 [if]  fn ?  1 fn +!  [then]                                                                                                 fg4 [if]                                                        code INITPM  ( -- )                                               next                                                          end-code                                                        [then]                                                          \ INITXMS INSIDE                                                code INITXMS  ( -- 0 | error )                                    >fg  1push                                                    end-code                                                                                                                        code INSIDE  ( adr_vertex_array n ix iy -- 0 | 1 )                ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  ds push  es pop  >fg  si pop  1push                end-codecode INTJOY  ( n adr_key adr_aux -- )                         \  parms # bx mov                                               \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  cx pop  ds push  es pop  >fg  next                           \ end-code                                                                                                                      code INTJOY  ( n -- key aux )                                     cx pop  fn+  get2 ) jmp                                       end-code                                                                                                                                                                                                                                                                                                                                                                                        \ INTKEY                                                        \ code INTKEY  ( adr_key adr_aux -- )                           \  parms # bx mov                                               \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code INTKEY  ( -- key aux )                                       fn+  get2 ) jmp                                               end-code                                                                                                                                                                                                                                                                                                                                                                                        \ FGINVERT JUSTIFY KBINIT                                       fg4 [if]                                                        code FGINVERT  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                        [then]                                                                                                                          code JUSTIFY  ( xjust yjust -- )                                  cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code KBINIT  ( state -- )                                         bx pop  >fg  next                                             end-code                                                                                                                                                                                        \ KBLAST KBRESET KBTEST                                         fg4 [if]                                                        code KBLAST  ( -- n | 0 )                                         >fg  1push                                                    end-code                                                                                                                        code KBRESET  ( -- )                                              >fg  next                                                     end-code                                                        [then]                                                                                                                          code KBTEST  ( scan_code -- 0 | 1 )                               bx pop  >fg  1push                                            end-code                                                                                                                                                                                        \ LOADPCX LOCATE                                                fg4 [if]                                                        code LOADPCX  ( adr_filename flags -- 0 | errcode )               cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                        [then]                                                                                                                          code LOCATE  ( row column -- )                                    cx pop  bx pop  >fg  next                                     end-code                                                                                                                        fg4 not [if]  fn ?  1 fn +!  [then]                                                                                                                                                                                                                                                                                             \ MAKEPCX MAKEPPR MAKESPR                                       code MAKEPCX  ( minx maxx miny maxy adr_filename -- 0 | error )   di pop  ax pop  dx pop  cx pop  bx pop  si push                 ax si mov  ds push  es pop  >fg  si pop  1push                end-code                                                                                                                        code MAKEPPR  ( minx maxx miny maxy adr_filename -- 0 | error )   di pop  ax pop  dx pop  cx pop  bx pop  si push                 ax si mov  ds push  es pop  >fg  si pop  1push                end-code                                                                                                                        code MAKESPR  ( minx maxx miny maxy adr_filename -- 0 | error )   di pop  ax pop  dx pop  cx pop  bx pop  si push                 ax si mov  ds push  es pop  >fg  si pop  1push                end-code                                                                                                                        \ MAPRGB MEASURE MEMAVAIL MEMORY                                code MAPRGB  ( red green blue -- n )                              dx pop  cx pop  bx pop  >fg  1push                            end-code                                                                                                                        code MEASURE  ( -- n )                                            >fg  1push                                                    end-code                                                                                                                        code MEMAVAIL  ( -- d )                                           >fg  ax dx xchg  2push                                        end-code                                                                                                                        code MEMORY  ( -- n )                                             >fg  1push                                                    end-code                                                        \ MOUSE256                                                      fg4 [if]                                                        code MOUSE256  ( adr_masks xoffset yoffset -- )                   dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                        [thencode MOUSEBUT  ( number adr_count adr_lastx adr_lasty -- )    \  parms # bx mov                                               \  ds 08 [bx] mov  0A [bx] pop                                  \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  cx pop  ds push  es pop  >fg  next                           \ end-code                                                                                                                      code MOUSEBUT  ( number -- count lastx lasty -- )                 cx pop  fn+  get3 ) jmp                                       end-code                                                                                                                                                                                                                                                                                                                        \ MOUSECUR MOUSEFIN MOUSEINI                                    code MOUSECUR  ( screen_mask cursor_mask -- )                     cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code MOUSEFIN  ( -- )                                             >fg  next                                                     end-code                                                                                                                        code MOUSEINI  ( -- n | -1 )                                      >fg  1push                                                    end-code                                                                                                                                                                                                                                                                                                                        \ MOUSELIM MOUSEMOV                                             code MOUSELIM  ( minx maxx miny maxy -- )                         ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                        code MOUSEMOV  ( ix iy -- )                                       cx pop  bx pop  >fg  next                                     end-codecode MOUSEPOS  ( adr_ix adr_iy adr_buttons -- )               \  parms # bx mov                                               \  ds 08 [bx] mov  0A [bx] pop                                  \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code MOUSEPOS  ( -- ix iy buttons )                               fn+  get3 ) jmp                                               end-code                                                                                                                                                                                                                                                                                                                        \ MOUSEPTR MOUSESPD MOUSEVIS FGMOVE                             code MOUSEPTR  ( adr_mask xoffset yoffset -- )                    dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code MOUSESPD  ( xmickeys ymickeys -- )                           cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code MOUSEVIS  ( state -- )                                       bx pop  >fg  next                                             end-code                                                                                                                        code FGMOVE  ( ix iy -- )                                         cx pop  bx pop  >fg  next                                     end-code                                                        \ MOVEREL MUSIC MUSICB NUMLOCK                                  code MOVEREL  ( ix iy -- )                                        cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code MUSIC  ( adr_music_string -- )                               bx pop  ds push  es pop  >fg  next                            end-code                                                                                                                        code MUSICB  ( adr_music_string ntimes -- )                       cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        code NUMLOCK  ( -- 0 | 1 )                                        >fg  1push                                                    end-code                                                        \ FGPACK PAGESIZE                                               fg4 [if]                                                        code FGPACK  ( adr_source adr_dest width height -- )              dx pop  cx pop  parms # bx mov                                  0A [bx] pop  ds 08 [bx] mov                                     06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                          code PAGESIZE  ( -- d )                                           >fg  ax dx xchg  2push                                        end-code                                                                                                                                                                                        \ PAINT PALETTE PALETTES PAN                                    code PAINT  ( ix iy -- )                                          cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code PALETTE  ( number color -- )                                 cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code PALETTES  ( adr_color_array -- )                             bx pop  ds push  es pop  >fg  next                            end-code                                                                                                                        code PAN  ( ix iy -- )                                            cx pop  bx pop  >fg  next                                     end-code                                                        \ PATTERN PCXHEAD PCXMODE                                       code PATTERN  ( index display_pattern -- )                        cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code PCXHEAD  ( adr_filename adr_pcx_header -- 0 | error )        parms # bx mov                                                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  1push                                   end-code                                                                                                                        code PCXMODE  ( adr_pcx_header -- n | -1 | -2 )                   bx pop  ds push  es pop  >fg  1push                           end-code                                                                                                                        \ PCXPAL                                                        fg4 [if]                                                        code PCXPAL  ( adr_filename adr_pcx_palette -- n | -1 | -2 )      parms # bx mov                                                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  1push                                   end-code                                                        [thenfg4 [if]                                                        code PCXRANGE                                                     ( adr_pcx_header adr_minx adr_maxx adr_miny adr_maxy -- )       parms # bx mov                                                  12 [bx] pop  ds 10 [bx] mov                                     0E [bx] pop  ds 0C [bx] mov                                     0A [bx] pop  ds 08 [bx] mov                                     06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                                                                                                                                                          \ PCXRANGE                                                      fg4 [if]                                                        code PCXRANGE  ( adr_pcx_header -- minx maxx miny maxy )          parms # bx mov  dx dx sub                                                   02 [bx] pop  ds 00 [bx] mov                         dx push  sp 06 [bx] mov  ds 04 [bx] mov                         dx push  sp 0A [bx] mov  ds 08 [bx] mov                         dx push  sp 0E [bx] mov  ds 0C [bx] mov                         dx push  sp 12 [bx] mov  ds 10 [bx] mov                         ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                                                                                                                                                                                                                          \ PLAYING POINT POINTX                                          code PLAYING  ( -- 0 | 1 )                                        >fg  1push                                                    end-code                                                                                                                        code POINT  ( ix iy -- )                                          cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code POINTX  ( ix iy -- )                                         cx pop  bx pop  >fg  next                                     end-code                                                                                                                                                                                                                                                                                                                        \ POLYEDGE POLYFILL                                             fg4 [if]                                                        code POLYEDGE  ( edge_flag -- )                                   bx pop  >fg  next                                             end-code                                                        [then]                                                                                                                          code POLYFILL  ( adr_vertex_array adr_work_array n -- )           cx pop  parms # bx mov                                          06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  next                                    end-code                                                                                                                                                                                                                                                        \ POLYGON POLYLINE POLYOFF                                      code POLYGON  ( adr_ix_array adr_iy_array n -- )                  cx pop  parms # bx mov                                          06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  next                                    end-code                                                                                                                        code POLYLINE  ( adr_vertex_array n -- )                          cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        code POLYOFF  ( ix iy -- )                                        cx pop  bx pop  >fg  next                                     end-code                                                                                                                        \ PRINT PRINTC PUTBLOCK                                         code PRINT  ( adr_string n -- )                                   cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        fg4 [if]                                                        code PRINTC  ( adr_string n -- )                                  cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                        [then]                                                                                                                          code PUTBLOCK  ( segment offset minx maxx miny maxy -- )          di pop  ax pop  dx pop  cx pop  bx pop  es pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                        \ PUTIMAGE QUIET RECT                                           code PUTIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code QUIET  ( -- )                                                >fg  next                                                     end-code                                                                                                                        code RECT  ( minx maxx miny maxy -- )                             ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                                                                                                                                                        \ RESET RESIZE RESTORE                                          code RESET  ( -- )                                                >fg  next                                                     end-code                                                                                                                        code RESIZE  ( width height -- )                                  cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code RESTORE  ( minx maxx miny maxy -- )                          ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                                                                                                                                                        \ RESUME REVIMAGE REVMASK                                       code RESUME  ( -- )                                               >fg  next                                                     end-code                                                                                                                        code REVIMAGE  ( adr_map_array width height -- )                  dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code REVMASK  ( adr_map_array runs width -- )                     dx pop  cx pop  bx pop  ds push  es pop  >fg  next            end-code                                                                                                                                                                                                                                                                                                                        \ FGSAVE SCALE                                                  code FGSAVE  ( minx maxx miny maxy -- )                           ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                        fg4 [if]                                                        code SCALE  ( adr_source adr_dest sw sh dw dh -- )                di pop  ax pop  dx pop  cx pop  parms # bx mov                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     si push  ax si mov                                              ds push  es pop  >fg  si pop  next                            end-code                                                        [then]                                                                                                                          \ SCRLOCK SCROLL SETATTR                                        code SCRLOCK  ( -- 0 | 1 )                                        >fg  1push                                                    end-code                                                                                                                        code SCROLL  ( minx maxx miny maxy jump type -- )                 es pop  di pop  ax pop  dx pop  cx pop  bx pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                                                                                        code SETATTR  ( foreground background blink -- )                  dx pop  cx pop  bx pop  >fg  next                             end-code                                                                                                                                                                                                                                                        \ SETBANKS SETCAPS SETCLIP                                      fg4 [if]                                                        code SETBANKS  ( read_bank write_bank -- )                        cx pop  bx pop  >fg  next                                     end-code                                                        [then]                                                                                                                          code SETCAPS  ( status -- )                                       bx pop  >fg  next                                             end-code                                                                                                                        code SETCLIP  ( minx maxx miny maxy -- )                          ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                        \ SETCOLOR SETDACS SETENTRY SETFUNC                             code SETCOLOR  ( color -- )                                       bx pop  >fg  next                                             end-code                                                                                                                        code SETDACS  ( start count adr_values -- )                       bx pop  cx pop  dx pop  ds push  es pop  >fg  next            end-code                                                                                                                        code SETENTRY  ( page_number page_addr page_type -- )             dx pop  cx pop  bx pop  >fg  next                             end-code                                                                                                                        code SETFUNC  ( mode -- )                                         bx pop  >fg  next                                             end-code                                                        \ SETHPAGE SETLINES SETMODE SETNUM                              code SETHPAGE  ( page_number -- )                                 bx pop  >fg  next                                             end-code                                                                                                                        code SETLINES  ( lines -- )                                       bx pop  >fg  next                                             end-code                                                                                                                        code SETMODE  ( mode_number -- )                                  bx pop  msg # dx mov  ds push  es pop  >fg  next              end-code                                                                                                                        code SETNUM  ( state -- )                                         bx pop  >fg  next                                             end-code                                                        \ SETPAGE SETRGB                                                code SETPAGE  ( page_number -- )                                  bx pop  >fg  next                                             end-code                                                                                                                        code SETRGB  ( number red green blue -- )                         ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                        fg4 [if]  fn ?  1 fn +!  [then]                                                                                                                                                                                                                                                                                                                                                                 \ SETVIEW                                                       fg4 [if]                                                        code SETVIEW                                                      ( adr_view_minx adr_view_maxx adr_view_miny adr_view_maxy       minx maxx miny maxy -- )                                        dx pop  cx pop  parms # bx mov                                  0A [bx] pop  08 [bx] pop                                        06 [bx] pop  04 [bx] pop                                        02 [bx] pop  00 [bx] pop                                        ds push  es pop  >fg  next                                    end-code                                                        [then]                                                                                                                          fg4 not [if]  fn ?  1 fn +!  [then]                                                                                                                                                             \ SETVPAGE SHEAR                                                code SETVPAGE  ( page_number -- )                                 bx pop  >fg  next                                             end-code                                                                                                                        fg4 [if]                                                        code SHEAR                                                        ( adr_source adr_dest width height new_size type -- )           di pop  ax pop  dx pop  cx pop  parms # bx mov                  06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     si push  ax si mov                                              ds push  es pop  >fg  si pop  next                            end-code                                                        [then]                                                                                                                          \ SHOWFLIC SHOWPCX SHOWPPR                                      fg4 [if]                                                        code SHOWFLIC  ( adr_filename count flags -- 0 | error )          dx pop  cx pop  bx pop  ds push  es pop  >fg  1push           end-code                                                        [then]                                                                                                                          fg4 not [if]  fn ?  1 fn +!  [then]                                                                                             code SHOWPCX  ( adr_filename flags -- 0 | error )                 cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                                                                                        code SHOWPPR  ( adr_filename width -- 0 | error )                 cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                        \ SHOWSPR FGSOUND SOUNDS                                        code SHOWSPR  ( adr_filename width -- 0 | error )                 cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                                                                                        code FGSOUND  ( frequency duration -- )                           cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code SOUNDS  ( adr_sound_array ntimes -- )                        cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                                                                                                                                                                                                                        \ SPLIT STALL SUSPEND                                           fg4 [if]                                                        code SPLIT  ( iy -- )                                             bx pop  >fg  next                                             end-code                                                        [then]                                                                                                                          code STALL  ( delay -- )                                          bx pop  >fg  next                                             end-code                                                                                                                        code SUSPEND  ( -- )                                              >fg  next                                                     end-code                                                                                                                                                                                        \ SVGAINIT SVGASTAT                                             code SVGAINIT  ( method -- n | 0 )                                bx pop  >fg  1push                                            end-code                                                                                                                        code SVGASTAT  ( -- n )                                           >fg  1push                                                    end-codecode SVGAVER  ( adr_major adr_minor -- )                      \  parms # bx mov                                               \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code SVGAVER  ( -- major minor )                                  fn+  get2 ) jmp                                               end-code                                                                                                                                                                                                                                                                                                                                                                                        \ TCDEFINE TCMASK                                               code TCDEFINE  ( index attribute -- )                             cx pop  bx pop  >fg  next                                     end-code                                                                                                                        code TCMASK  ( mask -- )                                          bx pop  >fg  next                                             end-codecode TCXFER                                                       ( minx maxx miny maxy newx newy source_page dest_page -- )      dx pop  cx pop  parms # bx mov                                  0A [bx] pop  08 [bx] pop                                        06 [bx] pop  04 [bx] pop                                        02 [bx] pop  00 [bx] pop                                        ds push  es pop  >fg  next                                    end-code                                                                                                                        code TESTMODE  ( mode pages -- 1 | 0 )                            cx pop  bx pop  >fg  1push                                    end-code                                                                                                                                                                                                                                                        \ TEXT TEXTC                                                    code TEXT  ( adr_string n -- )                                    cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        fg4 [if]                                                        code TEXTC  ( adr_string n -- )                                   cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                        [thencode TRANSFER                                                     ( minx maxx miny maxy newx newy source_page dest_page -- )      dx pop  cx pop  parms # bx mov                                  0A [bx] pop  08 [bx] pop                                        06 [bx] pop  04 [bx] pop                                        02 [bx] pop  00 [bx] pop                                        ds push  es pop  >fg  next                                    end-codefg4 [if]                                                        code UNPACK  ( source dest size -- )                              cx pop  parms # bx mov                                          06 [bx] pop  ds 04 [bx] mov                                     02 [bx] pop  ds 00 [bx] mov                                     ds push  es pop  >fg  next                                    end-code                                                                                                                        code VBADDR  ( handle -- segment offset )                         bx pop  >fg  2push                                            end-code                                                        [then]                                                                                                                                                                                                                                                          \ VBALLOC VBCLOSE                                               fg4 [if]                                                        code VBALLOC  ( width height -- handle | -1 | -2 )                cx pop  bx pop  ds push  es pop  >fg  1push                   end-code                                                                                                                        code VBCLOSE  ( -- )                                              >fg  next                                                     end-code                                                        [thenfg4 [if]                                                        code VBCOPY  ( minx maxx miny maxy newx newy source dest -- )     dx pop  cx pop  parms # bx mov                                  0A [bx] pop  08 [bx] pop                                        06 [bx] pop  04 [bx] pop                                        02 [bx] pop  00 [bx] pop                                        ds push  es pop  >fg  next                                    end-code                                                                                                                        code VBCUT  ( minx maxx miny maxy newx newy -- )                  es pop  di pop  ax pop  dx pop  cx pop  bx pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                        [then]                                                                                                                          \ VBDEFINE VBFREE VBHANDLE                                      fg4 [if]                                                        code VBDEFINE  ( segment offset width height -- handle | -1 )     dx pop  cx pop  bx pop  es pop  >fg  1push                    end-code                                                                                                                        code VBFREE  ( handle -- )                                        bx pop  >fg  next                                             end-code                                                                                                                        code VBHANDLE  ( -- handle | -1 )                                 >fg  1push                                                    end-code                                                        [then]                                                                                                                                                                                          \ VBINIT VBOPEN VBPASTE                                         fg4 [if]                                                        code VBINIT  ( -- )                                               >fg  next                                                     end-code                                                                                                                        code VBOPEN  ( handle -- 0 | error )                              bx pop  >fg  1push                                            end-code                                                                                                                        code VBPASTE  ( minx maxx miny maxy newx newy -- )                es pop  di pop  ax pop  dx pop  cx pop  bx pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                        [then]                                                                                                                          \ VBTCCOPY VBTCXFER                                             fg4 [if]                                                        code VBTCCOPY  ( minx maxx miny maxy newx newy source dest -- )   dx pop  cx pop  parms # bx mov                                  0A [bx] pop  08 [bx] pop                                        06 [bx] pop  04 [bx] pop                                        02 [bx] pop  00 [bx] pop                                        ds push  es pop  >fg  next                                    end-code                                                                                                                        code VBTCXFER  ( minx maxx miny maxy newx newy -- )               es pop  di pop  ax pop  dx pop  cx pop  bx pop                  si push  ax si mov  >fg  si pop  next                         end-code                                                        [then]                                                                                                                          \ VBUNDEF VERSION                                               fg4 [if]                                                        code VBUNDEF  ( handle -- )                                       bx pop  >fg  next                                             end-code                                                        [then]                                                                                                                          \ code VERSION  ( adr_major adr_minor -- )                      \  bx pop  fg4 [if] 4 [else] 5 [then] # 0 [bx] mov              \  bx pop  fg4 [if] 4 [else] 3 [then] # 0 [bx] mov  next        \ end-code                                                                                                                      code VERSION  ( -- major minor )                                  fg4 [if] 4 [else] 5 [then] # ax mov                             fg4 [if] 4 [else] 3 [then] # dx mov  2push                    end-code                                                        \ VGASTATE VOICE VOICES                                         fg4 [if]                                                        code VGASTATE  ( option -- )                                      bx pop  >fg  next                                             end-code                                                        [then]                                                                                                                          code VOICE  ( channel frequency volume duration -- )              ax pop  dx pop  cx pop  bx pop  si push                         ax si mov  >fg  si pop  next                                  end-code                                                                                                                        code VOICES  ( adr_sound_array ntimes -- )                        cx pop  bx pop  ds push  es pop  >fg  next                    end-code                                                                                                                        \ WAITFOR WAITKEY WAITVR                                        code WAITFOR  ( ticks -- )                                        bx pop  >fg  next                                             end-code                                                                                                                        code WAITKEY  ( -- )                                              >fg  next                                                     end-code                                                                                                                        code WAITVR  ( state -- )                                         bx pop  >fg  next                                             end-code                                                                                                                                                                                                                                                                                                                        \ FGWHERE                                                       \ code FGWHERE  ( adr_row adr_column -- )                       \  parms # bx mov                                               \  ds 04 [bx] mov  06 [bx] pop                                  \  ds 00 [bx] mov  02 [bx] pop                                  \  ds push  es pop  >fg  next                                   \ end-code                                                                                                                      code FGWHERE  ( -- row column )                                   fn+  get2 ) jmp                                               end-code                                                                                                                                                                                                                                                                                                                                                                                        \ XALPHA XCONVERT XVIEW                                         code XALPHA  ( ix -- n | ix )                                     bx pop  >fg  1push                                            end-code                                                                                                                        code XCONVERT  ( column -- n | column )                           bx pop  >fg  1push                                            end-code                                                                                                                        fg4 [if]                                                        code XVIEW  ( vx -- n | vx )                                      bx pop  >fg  1push                                            end-code                                                        [then]                                                                                                                                                                                          \ YALPHA YCONVERT YVIEW                                         code YALPHA  ( iy -- n | iy )                                     bx pop  >fg  1push                                            end-code                                                                                                                        code YCONVERT  ( row -- n | row )                                 bx pop  >fg  1push                                            end-code                                                                                                                        fg4 [if]                                                        code YVIEW  ( vy -- n | vy )                                      bx pop  >fg  1push                                            end-code                                                        [then]                                                                                                                                                                                                                                                          .( not used, highest )  fn @  1-  .                                                                                             behead  fg4 get3                                                                                                                decimal