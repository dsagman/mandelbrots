\ XPL0 compatible random number generator                                                                                       RAN ( n -- ran )    If n>0 return random number between 0                           and n-1. If n=0 reset seed to default                           value for repeatable sequence. If n<0                           randomize seed and return ran(+n).                                                                          RANSEED ( n -- )    set seed for random number generator                                                                        These routines were adapted from the XPL0 sources.              For information on the XPL0 programming language see:           http://www.xpl0.org/                                                                                                                                                                                                                                                                                                            \ Load screen                                                   forth definitions  decimal                                      application                                                                                                                     2 #screens 1- thruseed ranint                                                   \ seed                                                          here  1 , 0 ,  system  constant seed  application                                                                               \ randomize random number generator                             \ uses system interrupt counter                                 label ranint                                                      tod ) call             \ get random seed AX:DX                  4 # dx or              \ make sure its not zero                 dx seed ) mov          \ set seed                               ax seed 2+ ) mov                                                ret                                                           end-code                                                                                                                                                                                                                                                        \ random                                                        \ return a random number between 0 and the argument -1.         \ argument is in bx, result returned in dx                      \ seed <- seed*15a4e35 + 1                                      label random                                                      bx push           \ save argument                               seed ) bx mov                                                   seed 2+ ) cx mov                                                $4E35 # di mov                                                  $015A # ax mov                                                \ 32-bit multiply dx:ax <- ax:di * cx:bx                          bx mul            \ dx:ax <- ax*bx  DB                          ax cx xchg        \ save low word of DB; get C                  di mul            \ dx:ax <- ax*di  AC                                                                                                                                                        \                                                                 cx ax add         \ C+B                                         di ax xchg        \ save C+B; get A                             bx mul            \ dx:ax <- ax*bx  AB                          di dx add         \ A+C+B; 32-bt product = dx:ax                1 # ax add        \ inc dx:ax                                   0 # dx adc                                                      ax seed ) mov                                                   dx seed 2+ ) mov                                                ax pop  dx mul                                                  ret                                                           end-code                                                                                                                                                                                                                                                                                                                        \ RAN                                                           \ generate random number between 0 and (top of stack)-1         \ if tos = 0 then initialize seed for repeatable sequence       \ if tos < 0 then randomize and return ran(-tos)                code RAN ( n -- ran )                                             bx pop                  \ get maximum                           bx bx test  1 $ jnz     \ check for zero                        2537 # seed ) mov       \ set fixed sequence seeds              5149 # seed 2+ ) mov                                            bx push  next           \ return a zero on the stack          1 $:  2 $ jns             \ jump if positive argument             bx neg  ranint ) call   \ randomize seed                      2 $:  random ) call       \ get random number                     dx push  next           \ return remainder on stack           end-code                                                                                                                        \ RANSEED                                                       \ set seed for random number generator.                         code RANSEED ( u -- )                                             ax pop                                                          ax seed ) mov                                                   ax seed 2+ ) mov                                                next                                                          end-code                                                                                                                        0 ran drop  \ set default seed                                                                                                  behead seed random  \ remove names no longer needed                                                                                                                                                                                                                                                                             