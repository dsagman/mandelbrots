\ XPL0 compatible random number generator                                                                                       These routines were adapted from the XPL0 sources.              For information on the XPL0 programming language see:           www.idcomm.com/personal/lorenblaneydecimal                                                                                                                         \ seed                                                          here 0 ,  system  constant rank  application                    here 0 ,  system  constant ranl  application                    here 0 ,  system  constant ranm  application                                                                                    \ prime numbers that give good results                          system                                                          $8119 constant modk                                             $808D constant modl                                             $8003 constant modm                                             application                                                                                                                     -->                                                             \ randomize random number generator                             \ uses system interrupt counter                                 label ranint                                                      ax ax sub  ax es mov   \ set segment                            es: $46C ) ax mov      \ get random seed                        4 # ax or              \ make sure its not                      ax rank ) mov          \ set seed                               ret                                                           end-codereturn a random number between 0 and the argument -1.         \ argument is in bx, result returned in dx                      label random                                                      rank ) ax mov        \ rank:= rem((rank+rank) /modk)            ax ax add                                                       modk # ax cmp  1 $ jb                                           modk # ax sub                                                 1 $:  ax rank ) mov                                               ranl ) ax mov        \ ranl:= rem((ranl+ranl) /modl)            ax ax add                                                       modl # ax cmp  2 $ jb                                           modl # ax sub                                                 2 $:  ax ranl ) mov                                               rank ) ax add        \ ranm:= rem((rank+ranl+ranm) /modm)       ranm ) ax add                                                 -->                                                             \                                                               3 $:  modm # ax cmp  4 $ jb                                       modm # ax sub  3 $ ju                                         4 $:  ax ranm ) mov                                               al dh mov      \ make bit 15 in ax random (it's usually 0)      $80 # dh and   \ essentially copy bit 7 into bit 15             dh ah xor                                                       al dl mov      \ avoid bias errors for large random             dh dh sub      \ numbers by using a large dividend              bh bh test     \ avoid divide overflow error                    5 $ jnz                                                         dl dl sub                                                     5 $:  bx div     \ unsigned divide bx into dx:ax                  ret                                                           end-code                                                        -->                                                             \ RAN                                                           \ generate random number between 0 and (top of stack)-1         \ if tos = 0 then initialize seed for repeatable sequence       \ if tos < 0 then randomize and return ran(-tos)                code RAN  ( n -- rnd )                                            bx pop                  \ get maximum                           bx bx test  1 $ jnz     \ check for zero                        2537 # rank ) mov       \ set fixed sequence seeds              5149 # ranl ) mov                                               7026 # ranm ) mov                                               bx push  next           \ return a zero on the stack          1 $:  2 $ jns             \ jump if positive argument             bx neg  ranint ) call   \ randomize seed                      2 $:  random ) call       \ get random number                     dx push  next           \ return remainder on stack           end-code  -->                                                   \ RANSEED                                                       \ set seed for random number generator.                         code RANSEED  ( n -- )                                            rank ) pop                                                      5149 # ranl ) mov                                               7026 # ranm ) mov                                               next                                                          end-code                                                                                                                        0 ran drop  \ set default seed                                                                                                  excise rank random  \ remove names no longer needed                                                                                                                                                                                                                                                                             